{"version":3,"sources":["components/header/header.js","utilities/storage/countries.js","utilities/api/countries.js","utilities/services/countries.js","components/main/Pagination.js","components/main/Countries.js","components/main/MainPage.js","components/country/country.js","App.js","reportWebVitals.js","index.js"],"names":["Header","Navbar","bg","variant","Container","className","to","style","textDecoration","Brand","href","rel","color","fontSize","padding","storeCountries","allCountries","countriesChunks","length","push","splice","sliceCountries","offset","i","newOffset","localStorage","setItem","JSON","stringify","getCountries","exp","parse","getItem","Error","URL","getAllCountries","a","jQuery","get","console","log","getCountriesStorage","getAllCountriesApi","PagesList","props","useState","pageAmount","setPageAmount","useEffect","pagesTotal","parseInt","pages","amount","num","Pagination","background","map","el","items","Prev","disabled","currentPage","onClick","e","preventDefault","clickHandler","Item","active","Next","CountryList","slicedCountries","setSlicedCountries","fluid","ctries","toReturn","Row","ctry","CountryCard","country","Col","Card","height","Img","src","flags","svg","alt","name","common","objectFit","Body","Text","pathname","altSpellings","Button","MainBody","setCurrentPage","isReady","setIsReady","then","amountOfPages","key","match","getNumberOfPages","SelectedCountry","useLocation","capital","Image","region","official","Object","values","languages","population","area","timezones","App","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a4de5a58.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n//\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Container from 'react-bootstrap/Container';\r\n\r\nexport function Header() {\r\n  return (\r\n    <Navbar bg=\"dark\" variant=\"dark\">\r\n      <Container className=\"h-50 inline-block\">\r\n        <Link to=\"/\" style={{ textDecoration: 'none' }}>\r\n          <Navbar.Brand>ðŸŒŽ World Countries</Navbar.Brand>\r\n        </Link>\r\n        <div>\r\n          <a\r\n            href=\"https://github.com/nmpellecchia\"\r\n            rel=\"external\"\r\n            style={{ textDecoration: 'none' }}\r\n          >\r\n            <i\r\n              className=\"devicon-github-original\"\r\n              style={{ color: 'white', fontSize: '2rem', padding: '1rem' }}\r\n            ></i>\r\n          </a>\r\n          <a\r\n            href=\"https://www.linkedin.com/in/nicolas-pellecchia-440a01217/\"\r\n            rel=\"external\"\r\n            style={{ textDecoration: 'none' }}\r\n          >\r\n            <i\r\n              className=\"devicon-linkedin-plain\"\r\n              style={{ color: 'white', fontSize: '2rem', padding: '1rem' }}\r\n            ></i>\r\n          </a>\r\n        </div>\r\n      </Container>\r\n    </Navbar>\r\n  );\r\n}\r\n","const MAX_COUNTRIES = 25;\r\n\r\nexport function storeCountries(allCountries) {\r\n  const countriesChunks = sliceCountries(allCountries);\r\n\r\n  let offset = 0;\r\n  for (let i = 0; i < countriesChunks.length; i++) {\r\n    // dynamically mark wich countries are inside setting the offsets.\r\n    let newOffset = offset + countriesChunks[i].length;\r\n    localStorage.setItem(\r\n      `countries_${offset + 1}_${newOffset}`,\r\n      JSON.stringify(countriesChunks[i])\r\n    );\r\n    offset = newOffset;\r\n  }\r\n}\r\n\r\nfunction sliceCountries(allCountries) {\r\n  let countriesChunks = [];\r\n  // To avoid storing an unnecessarily long object, divide it into manageable parts\r\n\r\n  while (allCountries.length) {\r\n    countriesChunks.push(allCountries.splice(0, MAX_COUNTRIES));\r\n  }\r\n  return countriesChunks;\r\n}\r\n\r\nexport function getCountries(offset) {\r\n  const exp = `countries_${offset}_${offset + MAX_COUNTRIES - 1}`;\r\n  const allCountries = JSON.parse(localStorage.getItem(exp));\r\n\r\n  // Check if the key doesn't exist\r\n  if (allCountries === null) {\r\n    throw new Error('Countries not found inside local storage');\r\n  }\r\n\r\n  return allCountries;\r\n}\r\n","import jQuery from 'jquery';\r\n\r\n// NOTE: API CHANGED URL TO https://restcountries.com/v3.1/all\r\n// NEEDS TESTING IN CASE SOMETHING BREAKS\r\n// IT SHOULD NOT BUT I'M NOT SURE\r\n\r\n/* const URL = 'https://restcountries.eu/rest/v2/'; */\r\nconst URL = 'https://restcountries.com/v3.1/';\r\n\r\nexport async function getAllCountries() {\r\n  try {\r\n    const allCountries = await jQuery.get(`${URL}all`);\r\n    return allCountries;\r\n  } catch (e) {\r\n    throw new Error(\"Couldn't access the service\");\r\n  }\r\n}\r\n\r\nexport async function getCountry(name) {\r\n  if (name === undefined) {\r\n    throw new Error(\"A valid country name it's needed\");\r\n  }\r\n  try {\r\n    const country = await jQuery.get(`${URL}${name}`, data => {\r\n      console.log(data);\r\n    });\r\n    return country;\r\n  } catch (e) {\r\n    throw new Error(\"Couldn't access the service\");\r\n  }\r\n}\r\n","import {\r\n  getCountries as getCountriesStorage,\r\n  storeCountries,\r\n} from '../storage/countries.js';\r\nimport { getAllCountries as getAllCountriesApi } from '../api/countries.js';\r\n\r\nexport async function getAllCountries() {\r\n  /* Get them from the storage if possible */\r\n  try {\r\n    console.log('Countries from local storage!');\r\n    return getCountriesStorage(1);\r\n  } catch (e) {\r\n    console.log('Countries from API!');\r\n    const allCountries = await getAllCountriesApi();\r\n    storeCountries(allCountries);\r\n    return allCountries;\r\n  }\r\n}\r\n","import { React, useEffect, useState } from 'react';\r\nimport Pagination from 'react-bootstrap/Pagination';\r\n\r\nexport function PagesList(props) {\r\n  const [pageAmount, setPageAmount] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Create an array with the amount of pages\r\n    const pagesTotal = parseInt(props.pages);\r\n    const amount = [];\r\n    for (let num = 1; num < pagesTotal; num++) {\r\n      amount.push(num);\r\n    }\r\n    setPageAmount(amount);\r\n  }, [props.pages]);\r\n\r\n  return (\r\n    <div>\r\n      <Pagination style={{ background: 'black' }} className=\"m-0 w-100\">\r\n        {pageAmount.map((el, i) => {\r\n          // mapping an Arr to better manipulate the logic of the items\r\n          // Doing it with others method gave too many errors\r\n          let items = [];\r\n\r\n          if (i === 0) {\r\n            items.push(\r\n              <Pagination.Prev\r\n                key={'page-prev'}\r\n                disabled={props.currentPage > 1 ? false : true}\r\n                onClick={e => {\r\n                  e.preventDefault();\r\n                  props.clickHandler(props.currentPage - 1);\r\n                }}\r\n              />\r\n            );\r\n          }\r\n          items.push(\r\n            <Pagination.Item\r\n              key={i}\r\n              active={props.currentPage === el ? true : false}\r\n              onClick={e => {\r\n                e.preventDefault();\r\n                props.clickHandler(el);\r\n              }}\r\n            >\r\n              {i + 1}\r\n            </Pagination.Item>\r\n          );\r\n          if (i === pageAmount.length - 1) {\r\n            items.push(\r\n              <Pagination.Next\r\n                key={'page-next'}\r\n                disabled={props.currentPage < props.pages - 1 ? false : true}\r\n                onClick={e => {\r\n                  e.preventDefault();\r\n                  props.clickHandler(props.currentPage + 1);\r\n                }}\r\n              />\r\n            );\r\n          }\r\n          return items;\r\n        })}\r\n      </Pagination>\r\n    </div>\r\n  );\r\n}\r\n","import { React, useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { getCountries } from '../../utilities/storage/countries';\r\n//\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nexport function CountryList(props) {\r\n  const [slicedCountries, setSlicedCountries] = useState([]);\r\n  const PAGE_OFFSET = 25;\r\n  const amountPerRow = 5;\r\n\r\n  useEffect(() => {\r\n    let allCountries;\r\n    let items = [];\r\n    props.currentPage === 1\r\n      ? (allCountries = getCountries(parseInt(props.currentPage)))\r\n      : // countries are stored 1_25; 26_50 etc. This formula gives the correct numbers to get from the storage\r\n        // E.g.: x(offset)*y(pageNumber)+1 ::: 25*2+1 = 51\r\n        (allCountries = getCountries(\r\n          PAGE_OFFSET * parseInt(props.currentPage) + 1\r\n        ));\r\n    // get the countries divided in the amount I want\r\n    while (allCountries.length) {\r\n      items.push(allCountries.splice(0, amountPerRow));\r\n    }\r\n    setSlicedCountries(items);\r\n  }, [props.currentPage]);\r\n\r\n  return (\r\n    <Container fluid className=\"m-0 w-100\">\r\n      {slicedCountries.map((ctries, i) => {\r\n        let toReturn = [];\r\n\r\n        toReturn.push(\r\n          <Row key={i}>\r\n            {ctries.map((ctry, i) => {\r\n              return <CountryCard key={i} country={ctry} />;\r\n            })}\r\n          </Row>\r\n        );\r\n\r\n        return toReturn;\r\n      })}\r\n    </Container>\r\n  );\r\n}\r\n\r\nfunction CountryCard(props) {\r\n  const { country } = props;\r\n  return (\r\n    <Col>\r\n      <Card className=\"bg-dark text-white m-1\" style={{ height: '90%' }}>\r\n        <Card.Img\r\n          variant=\"top\"\r\n          src={country.flags.svg}\r\n          alt={`Flag of ${country.name.common}`}\r\n          style={{ objectFit: 'cover', height: '50%' }}\r\n        />\r\n        <Card.Body className=\"d-flex flex-column justify-content-around\">\r\n          <Card.Text>{country.name.common}</Card.Text>\r\n          <Link\r\n            /* to=\"/selected-country\" */ to={{\r\n              pathname: '/selected-country/' + country.altSpellings[0],\r\n              country: country,\r\n            }}\r\n          >\r\n            <Button variant=\"outline-light\">View more</Button>\r\n          </Link>\r\n        </Card.Body>\r\n      </Card>\r\n    </Col>\r\n  );\r\n}\r\n","import { React, useState, useEffect } from 'react';\r\n//////    CSS      //////\r\nimport './Main.css';\r\n////// Components //////\r\nimport { getAllCountries } from '../../utilities/services/countries.js';\r\nimport { PagesList } from './Pagination.js';\r\nimport { CountryList } from './Countries.js';\r\n\r\nexport function MainBody() {\r\n  // Keep track of what contents display,\r\n  // The current page is needed for the CountryList\r\n  // While the setter is used by the PageItems\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n\r\n  const [isReady, setIsReady] = useState(false);\r\n  /*  */\r\n  const getNumberOfPages = () => {\r\n    let amountOfPages = 0;\r\n    for (let i = 0; i < localStorage.length; i++) {\r\n      const regex = /(countries_)/gi;\r\n      if (localStorage.key(i).match(regex)) {\r\n        amountOfPages++;\r\n      }\r\n    }\r\n    return amountOfPages;\r\n  };\r\n\r\n  // useEffect is used to execute things that don't directly affect outputs\r\n  useEffect(() => {\r\n    getAllCountries().then(() => setIsReady(true));\r\n  }, []); // An empty arr tells this effect to execute only once after initial rendering\r\n\r\n  return (\r\n    <main\r\n      className=\"d-flex flex-column align-items-center\"\r\n      /* style={{ background: 'black' }} */\r\n    >\r\n      <PagesList\r\n        pages={getNumberOfPages()}\r\n        currentPage={currentPage}\r\n        clickHandler={setCurrentPage}\r\n      ></PagesList>\r\n      {!isReady ? (\r\n        <div>loading</div>\r\n      ) : (\r\n        <CountryList currentPage={currentPage}></CountryList>\r\n      )}\r\n    </main>\r\n  );\r\n}\r\n","import { React } from 'react';\r\n//\r\nimport './country.css';\r\n//\r\nimport { Container } from 'react-bootstrap';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Image from 'react-bootstrap/Image';\r\n//\r\nimport { useLocation } from 'react-router-dom';\r\n\r\nexport function SelectedCountry() {\r\n  const { country } = useLocation();\r\n\r\n  return (\r\n    <>\r\n      <Container fluid>\r\n        <Row className=\"main-info\">\r\n          <Col className=\"d-flex flex-column justify-content-around align-items-center\">\r\n            <h1 className=\"cty-title\"> {country.name.common}</h1>\r\n            <h2 className=\"cty-capital\">Capital: {country.capital}</h2>\r\n          </Col>\r\n          <Col className=\"d-flex justify-content-center\">\r\n            <Image className=\"country-img\" src={country.flags.svg} fluid />\r\n          </Col>\r\n        </Row>\r\n        <Row className=\"complement-info\">\r\n          <Col className=\"p-2\">\r\n            <h3 className=\"cty-continent p-3\">Continent: {country.region}</h3>\r\n            <h3 className=\"cty-off-name p-3\">\r\n              Official name: {country.name.official}\r\n            </h3>\r\n            <h3 className=\"cty-lang p-3\">\r\n              Languages: {Object.values(country.languages)}\r\n            </h3>\r\n          </Col>\r\n          <Col className=\"p-2\">\r\n            <h3 className=\"cty-pop p-3\">\r\n              Population: {country.population} inhabitants\r\n            </h3>\r\n            <h3 className=\"cty-ar p-3\">Area: {country.area} km</h3>\r\n            <h3 className=\"cty-time p-3\">Timezones: {country.timezones}</h3>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n","import './App.css';\r\n//\r\nimport React from 'react';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\n////// Bootstrap imports //////\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n///// Components ///////\r\nimport { Header } from './components/header/header.js';\r\nimport { MainBody } from './components/main/MainPage.js';\r\nimport { SelectedCountry } from './components/country/country';\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <div className=\"App\">\r\n        <Header />\r\n        <Switch>\r\n          <Route path=\"/selected-country\">\r\n            <SelectedCountry />\r\n          </Route>\r\n          <Route path=\"/\">\r\n            <MainBody />\r\n          </Route>\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}